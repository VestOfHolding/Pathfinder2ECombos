package vest.pfclass;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.text.WordUtils;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import static vest.pfclass.PFClass.*;

public enum Subclass {
    BOMBER(ALCHEMIST.name()),
    CHIRUGEON(ALCHEMIST.name()),
    MUTAGENIST(ALCHEMIST.name()),
    APE_ANIMAL(BARBARIAN.name()),
    BEAR_ANIMAL(BARBARIAN.name()),
    BULL_ANIMAL(BARBARIAN.name()),
    CAT_ANIMAL(BARBARIAN.name()),
    DEER_ANIMAL(BARBARIAN.name()),
    FROG_ANIMAL(BARBARIAN.name()),
    SHARK_ANIMAL(BARBARIAN.name()),
    SNAKE_ANIMAL(BARBARIAN.name()),
    WOLF_ANIMAL(BARBARIAN.name()),
    BLACK_DRAGON(BARBARIAN.name()),
    BLUE_DRAGON(BARBARIAN.name()),
    GREEN_DRAGON(BARBARIAN.name()),
    RED_DRAGON(BARBARIAN.name()),
    WHITE_DRAGON(BARBARIAN.name()),
    BRASS_DRAGON(BARBARIAN.name()),
    BRONZE_DRAGON(BARBARIAN.name()),
    COPPER_DRAGON(BARBARIAN.name()),
    GOLD_DRAGON(BARBARIAN.name()),
    SILVER_DRAGON(BARBARIAN.name()),
    FURY(BARBARIAN.name()),
    GIANT(BARBARIAN.name()),
    SPIRIT(BARBARIAN.name()),
    ENIGMA(BARD.name()),
    MAESTRO(BARD.name()),
    POLYMATH(BARD.name()),
    PALADIN(CHAMPION.name()),
    REDEEMER(CHAMPION.name()),
    LIBERATOR(CHAMPION.name()),
    CLOISTERED(CLERIC.name()),
    WARPRIEST(CLERIC.name()),
    ANIMAL(DRUID.name()),
    LEAF(DRUID.name()),
    STORM(DRUID.name()),
    WILD(DRUID.name()),
    FLURRY(RANGER.name()),
    OUTWIT(RANGER.name()),
    PRECISION(RANGER.name()),
    ABERRANT(SORCERER.name()),
    ANGELIC(SORCERER.name()),
    DEMONIC(SORCERER.name()),
    DIABOLIC(SORCERER.name()),
    BLACK_DRACONIC(SORCERER.name()),
    BLUE_DRACONIC(SORCERER.name()),
    GREEN_DRACONIC(SORCERER.name()),
    RED_DRACONIC(SORCERER.name()),
    WHITE_DRACONIC(SORCERER.name()),
    BRASS_DRACONIC(SORCERER.name()),
    BRONZE_DRACONIC(SORCERER.name()),
    COPPER_DRACONIC(SORCERER.name()),
    GOLD_DRACONIC(SORCERER.name()),
    SILVER_DRACONIC(SORCERER.name()),
    AIR_ELEMENTAL(SORCERER.name()),
    EARTH_ELEMENTAL(SORCERER.name()),
    FIRE_ELEMENTAL(SORCERER.name()),
    WATER_ELEMENTAL(SORCERER.name()),
    FEY(SORCERER.name()),
    HAG(SORCERER.name()),
    IMPERIAL(SORCERER.name()),
    UNDEAD(SORCERER.name()),
    IMPROVED_FAMILIAR_ATTUNEMENT_THESIS_ABJURATION(WIZARD.name()),
    METAMAGICAL_EXPERIMENTATION_THESIS_ABJURATION(WIZARD.name()),
    SPELL_BLENDING_THESIS_ABJURATION(WIZARD.name()),
    SPELL_SUBSTITUTION_THESIS_ABJURATION(WIZARD.name()),
    IMPROVED_FAMILIAR_ATTUNEMENT_THESIS_CONJURATION(WIZARD.name()),
    METAMAGICAL_EXPERIMENTATION_THESIS_CONJURATION(WIZARD.name()),
    SPELL_BLENDING_THESIS_CONJURATION(WIZARD.name()),
    SPELL_SUBSTITUTION_THESIS_CONJURATION(WIZARD.name()),
    IMPROVED_FAMILIAR_ATTUNEMENT_THESIS_DIVINATION(WIZARD.name()),
    METAMAGICAL_EXPERIMENTATION_THESIS_DIVINATION(WIZARD.name()),
    SPELL_BLENDING_THESIS_DIVINATION(WIZARD.name()),
    SPELL_SUBSTITUTION_THESIS_DIVINATION(WIZARD.name()),
    IMPROVED_FAMILIAR_ATTUNEMENT_THESIS_ENCHANTMENT(WIZARD.name()),
    METAMAGICAL_EXPERIMENTATION_THESIS_ENCHANTMENT(WIZARD.name()),
    SPELL_BLENDING_THESIS_ENCHANTMENT(WIZARD.name()),
    SPELL_SUBSTITUTION_THESIS_ENCHANTMENT(WIZARD.name()),
    IMPROVED_FAMILIAR_ATTUNEMENT_THESIS_EVOCATION(WIZARD.name()),
    METAMAGICAL_EXPERIMENTATION_THESIS_EVOCATION(WIZARD.name()),
    SPELL_BLENDING_THESIS_EVOCATION(WIZARD.name()),
    SPELL_SUBSTITUTION_THESIS_EVOCATION(WIZARD.name()),
    IMPROVED_FAMILIAR_ATTUNEMENT_THESIS_ILLUSION(WIZARD.name()),
    METAMAGICAL_EXPERIMENTATION_THESIS_ILLUSION(WIZARD.name()),
    SPELL_BLENDING_THESIS_ILLUSION(WIZARD.name()),
    SPELL_SUBSTITUTION_THESIS_ILLUSION(WIZARD.name()),
    IMPROVED_FAMILIAR_ATTUNEMENT_THESIS_NECROMANCY(WIZARD.name()),
    METAMAGICAL_EXPERIMENTATION_THESIS_NECROMANCY(WIZARD.name()),
    SPELL_BLENDING_THESIS_NECROMANCY(WIZARD.name()),
    SPELL_SUBSTITUTION_THESIS_NECROMANCY(WIZARD.name()),
    IMPROVED_FAMILIAR_ATTUNEMENT_THESIS_TRANSMUTATION(WIZARD.name()),
    METAMAGICAL_EXPERIMENTATION_THESIS_TRANSMUTATION(WIZARD.name()),
    SPELL_BLENDING_THESIS_TRANSMUTATION(WIZARD.name()),
    SPELL_SUBSTITUTION_THESIS_TRANSMUTATION(WIZARD.name()),
    IMPROVED_FAMILIAR_ATTUNEMENT_THESIS_UNIVERSALIST(WIZARD.name()),
    METAMAGICAL_EXPERIMENTATION_THESIS_UNIVERSALIST(WIZARD.name()),
    SPELL_BLENDING_THESIS_UNIVERSALIST(WIZARD.name()),
    SPELL_SUBSTITUTION_THESIS_UNIVERSALIST(WIZARD.name());

    String pfClass;

    Subclass(String pfClass) {
        this.pfClass = pfClass;
    }

    public static List<Subclass> getSubclassByClass(String pfClass) {
        return Arrays.stream(values())
                .filter(sc -> StringUtils.equalsIgnoreCase(sc.pfClass, pfClass))
                .collect(Collectors.toList());
    }

    public String getDisplayName() {
        return WordUtils.capitalize(name().toLowerCase().replaceAll("_", " "));
    }
}
