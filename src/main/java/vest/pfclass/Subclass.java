package vest.pfclass;

import lombok.Getter;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.text.WordUtils;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import static vest.Constants.*;

@Getter
public enum Subclass {
    BOMBER(ALCHEMIST_NAME),
    CHIRUGEON(ALCHEMIST_NAME),
    MUTAGENIST(ALCHEMIST_NAME),
    TOXICOLOGIST(ALCHEMIST_NAME),
    APE_ANIMAL(BARBARIAN_NAME),
    BEAR_ANIMAL(BARBARIAN_NAME),
    BULL_ANIMAL(BARBARIAN_NAME),
    CAT_ANIMAL(BARBARIAN_NAME),
    DEER_ANIMAL(BARBARIAN_NAME),
    FROG_ANIMAL(BARBARIAN_NAME),
    SHARK_ANIMAL(BARBARIAN_NAME),
    SNAKE_ANIMAL(BARBARIAN_NAME),
    WOLF_ANIMAL(BARBARIAN_NAME),
    BLACK_DRAGON(BARBARIAN_NAME),
    BLUE_DRAGON(BARBARIAN_NAME),
    GREEN_DRAGON(BARBARIAN_NAME),
    RED_DRAGON(BARBARIAN_NAME),
    WHITE_DRAGON(BARBARIAN_NAME),
    BRASS_DRAGON(BARBARIAN_NAME),
    BRONZE_DRAGON(BARBARIAN_NAME),
    COPPER_DRAGON(BARBARIAN_NAME),
    GOLD_DRAGON(BARBARIAN_NAME),
    SILVER_DRAGON(BARBARIAN_NAME),
    FURY(BARBARIAN_NAME),
    GIANT(BARBARIAN_NAME),
    SPIRIT(BARBARIAN_NAME),
    SUPERSTITION(BARBARIAN_NAME),
    ENIGMA(BARD_NAME),
    MAESTRO(BARD_NAME),
    POLYMATH(BARD_NAME),
    WARRIOR(BARD_NAME),
    PALADIN(CHAMPION_NAME),
    REDEEMER(CHAMPION_NAME),
    LIBERATOR(CHAMPION_NAME),
    TYRANT(CHAMPION_NAME),
    DESECRATER(CHAMPION_NAME),
    ANTIPALADIN(CHAMPION_NAME),
    CLOISTERED(CLERIC_NAME),
    WARPRIEST(CLERIC_NAME),
    ANIMAL(DRUID_NAME),
    LEAF(DRUID_NAME),
    STORM(DRUID_NAME),
    WILD(DRUID_NAME),
    NONE_F(FIGHTER_NAME),
    NONE_M(MONK_NAME),
    FLURRY(RANGER_NAME),
    OUTWIT(RANGER_NAME),
    PRECISION(RANGER_NAME),
    NONE_RR(ROGUE_RUFF_NAME),
    NONE_RS(ROGUE_SCOUNDREL_NAME),
    NONE_RT(ROGUE_THIEF_NAME),
    NONE_RE(ROGUE_ELDRITCH_NAME),
    NONE_RM(ROGUE_MASTERMIND_NAME),
    ABERRANT(SORCERER_NAME),
    ANGELIC(SORCERER_NAME),
    DEMONIC(SORCERER_NAME),
    DIABOLIC(SORCERER_NAME),
    BLACK_DRACONIC(SORCERER_NAME),
    BLUE_DRACONIC(SORCERER_NAME),
    GREEN_DRACONIC(SORCERER_NAME),
    RED_DRACONIC(SORCERER_NAME),
    WHITE_DRACONIC(SORCERER_NAME),
    BRASS_DRACONIC(SORCERER_NAME),
    BRONZE_DRACONIC(SORCERER_NAME),
    COPPER_DRACONIC(SORCERER_NAME),
    GOLD_DRACONIC(SORCERER_NAME),
    SILVER_DRACONIC(SORCERER_NAME),
    AIR_ELEMENTAL(SORCERER_NAME),
    EARTH_ELEMENTAL(SORCERER_NAME),
    FIRE_ELEMENTAL(SORCERER_NAME),
    WATER_ELEMENTAL(SORCERER_NAME),
    FEY(SORCERER_NAME),
    HAG(SORCERER_NAME),
    IMPERIAL(SORCERER_NAME),
    UNDEAD(SORCERER_NAME),
    NYMPH(SORCERER_NAME),
    GENIE(SORCERER_NAME),
    GENIE2(SORCERER_NAME),
    GENIE3(SORCERER_NAME),
    GENIE4(SORCERER_NAME),
    PSYCHOPOMP(SORCERER_NAME),
    SHADOW(SORCERER_NAME),
    IMPROVED_FAMILIAR_ATTUNEMENT_THESIS_ABJURATION(WIZARD_NAME),
    METAMAGICAL_EXPERIMENTATION_THESIS_ABJURATION(WIZARD_NAME),
    SPELL_BLENDING_THESIS_ABJURATION(WIZARD_NAME),
    SPELL_SUBSTITUTION_THESIS_ABJURATION(WIZARD_NAME),
    STAFF_NEXUS_THESIS_ABJURATION(WIZARD_NAME),
    IMPROVED_FAMILIAR_ATTUNEMENT_THESIS_CONJURATION(WIZARD_NAME),
    METAMAGICAL_EXPERIMENTATION_THESIS_CONJURATION(WIZARD_NAME),
    SPELL_BLENDING_THESIS_CONJURATION(WIZARD_NAME),
    SPELL_SUBSTITUTION_THESIS_CONJURATION(WIZARD_NAME),
    STAFF_NEXUS_THESIS_CONJURATION(WIZARD_NAME),
    IMPROVED_FAMILIAR_ATTUNEMENT_THESIS_DIVINATION(WIZARD_NAME),
    METAMAGICAL_EXPERIMENTATION_THESIS_DIVINATION(WIZARD_NAME),
    SPELL_BLENDING_THESIS_DIVINATION(WIZARD_NAME),
    SPELL_SUBSTITUTION_THESIS_DIVINATION(WIZARD_NAME),
    STAFF_NEXUS_THESIS_DIVINATION(WIZARD_NAME),
    IMPROVED_FAMILIAR_ATTUNEMENT_THESIS_ENCHANTMENT(WIZARD_NAME),
    METAMAGICAL_EXPERIMENTATION_THESIS_ENCHANTMENT(WIZARD_NAME),
    SPELL_BLENDING_THESIS_ENCHANTMENT(WIZARD_NAME),
    SPELL_SUBSTITUTION_THESIS_ENCHANTMENT(WIZARD_NAME),
    STAFF_NEXUS_THESIS_ENCHANTMENT(WIZARD_NAME),
    IMPROVED_FAMILIAR_ATTUNEMENT_THESIS_EVOCATION(WIZARD_NAME),
    METAMAGICAL_EXPERIMENTATION_THESIS_EVOCATION(WIZARD_NAME),
    SPELL_BLENDING_THESIS_EVOCATION(WIZARD_NAME),
    SPELL_SUBSTITUTION_THESIS_EVOCATION(WIZARD_NAME),
    STAFF_NEXUS_THESIS_EVOCATION(WIZARD_NAME),
    IMPROVED_FAMILIAR_ATTUNEMENT_THESIS_ILLUSION(WIZARD_NAME),
    METAMAGICAL_EXPERIMENTATION_THESIS_ILLUSION(WIZARD_NAME),
    SPELL_BLENDING_THESIS_ILLUSION(WIZARD_NAME),
    SPELL_SUBSTITUTION_THESIS_ILLUSION(WIZARD_NAME),
    STAFF_NEXUS_THESIS_ILLUSION(WIZARD_NAME),
    IMPROVED_FAMILIAR_ATTUNEMENT_THESIS_NECROMANCY(WIZARD_NAME),
    METAMAGICAL_EXPERIMENTATION_THESIS_NECROMANCY(WIZARD_NAME),
    SPELL_BLENDING_THESIS_NECROMANCY(WIZARD_NAME),
    SPELL_SUBSTITUTION_THESIS_NECROMANCY(WIZARD_NAME),
    STAFF_NEXUS_THESIS_NECROMANCY(WIZARD_NAME),
    IMPROVED_FAMILIAR_ATTUNEMENT_THESIS_TRANSMUTATION(WIZARD_NAME),
    METAMAGICAL_EXPERIMENTATION_THESIS_TRANSMUTATION(WIZARD_NAME),
    SPELL_BLENDING_THESIS_TRANSMUTATION(WIZARD_NAME),
    SPELL_SUBSTITUTION_THESIS_TRANSMUTATION(WIZARD_NAME),
    STAFF_NEXUS_THESIS_TRANSMUTATION(WIZARD_NAME),
    IMPROVED_FAMILIAR_ATTUNEMENT_THESIS_UNIVERSALIST(WIZARD_NAME),
    METAMAGICAL_EXPERIMENTATION_THESIS_UNIVERSALIST(WIZARD_NAME),
    SPELL_BLENDING_THESIS_UNIVERSALIST(WIZARD_NAME),
    SPELL_SUBSTITUTION_THESIS_UNIVERSALIST(WIZARD_NAME),
    STAFF_NEXUS_THESIS_UNIVERSALIST(WIZARD_NAME),
    ALCHEMICAL_STUDIES(INVESTIGATOR_NAME),
    EMPIRICISM(INVESTIGATOR_NAME),
    FORENSIC_MEDICINE(INVESTIGATOR_NAME),
    INTERROGATION(INVESTIGATOR_NAME),
    ANCESTRY(ORACLE_NAME),
    BATTLE(ORACLE_NAME),
    BONES(ORACLE_NAME),
    COSMOS(ORACLE_NAME),
    FLAMES(ORACLE_NAME),
    LIFE(ORACLE_NAME),
    LORE(ORACLE_NAME),
    TEMPEST(ORACLE_NAME),
    BRAGGART(SWASHBUCKLER_NAME),
    FENCER(SWASHBUCKLER_NAME),
    GYMNAST(SWASHBUCKLER_NAME),
    BATTLE_DANCER(SWASHBUCKLER_NAME),
    WIT(SWASHBUCKLER_NAME),
    CURSE(WITCH_NAME),
    FATE(WITCH_NAME),
    FERVOR(WITCH_NAME),
    NIGHT(WITCH_NAME),
    RUNE(WITCH_NAME),
    WILD_WITCH(WITCH_NAME),
    WINTER(WITCH_NAME);

    private final String pfClass;

    Subclass(String pfClass) {
        this.pfClass = pfClass;
    }

    public static List<Subclass> getSubclassByClass(String pfClass) {
        return Arrays.stream(values())
                .filter(sc -> StringUtils.equalsIgnoreCase(sc.pfClass, pfClass))
                .collect(Collectors.toList());
    }

    public String getDisplayName() {
        return WordUtils.capitalize(name().toLowerCase().replaceAll("_", " "));
    }
}
